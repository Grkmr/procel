/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OCEAn
 * OpenAPI spec version: 0.9.12
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  BodyImportOcelImportPost,
  DirectedGraphResponse,
  DownloadOcelDownloadGetParams,
  HTTPValidationError,
  ImportOcelImportPostParams,
  ObjectTypeRequestBody,
  OcelResponse,
  OcpnRequestBody,
  OcpnResponse,
  TaskStatusResponse,
  TaskStatusTaskStatusGetParams,
  WeightedDirectedGraphResponse
} from '.././';





/**
 * Return the status of a long-running task.
 * @summary Task status
 */
export const taskStatusTaskStatusGet = (
    params: TaskStatusTaskStatusGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TaskStatusResponse>> => {
    
    
    return axios.get(
      `/task-status`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getTaskStatusTaskStatusGetQueryKey = (params: TaskStatusTaskStatusGetParams,) => {
    return [`/task-status`, ...(params ? [params]: [])] as const;
    }

    
export const getTaskStatusTaskStatusGetQueryOptions = <TData = Awaited<ReturnType<typeof taskStatusTaskStatusGet>>, TError = AxiosError<HTTPValidationError>>(params: TaskStatusTaskStatusGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof taskStatusTaskStatusGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTaskStatusTaskStatusGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof taskStatusTaskStatusGet>>> = ({ signal }) => taskStatusTaskStatusGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof taskStatusTaskStatusGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TaskStatusTaskStatusGetQueryResult = NonNullable<Awaited<ReturnType<typeof taskStatusTaskStatusGet>>>
export type TaskStatusTaskStatusGetQueryError = AxiosError<HTTPValidationError>


export function useTaskStatusTaskStatusGet<TData = Awaited<ReturnType<typeof taskStatusTaskStatusGet>>, TError = AxiosError<HTTPValidationError>>(
 params: TaskStatusTaskStatusGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof taskStatusTaskStatusGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof taskStatusTaskStatusGet>>,
          TError,
          Awaited<ReturnType<typeof taskStatusTaskStatusGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTaskStatusTaskStatusGet<TData = Awaited<ReturnType<typeof taskStatusTaskStatusGet>>, TError = AxiosError<HTTPValidationError>>(
 params: TaskStatusTaskStatusGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof taskStatusTaskStatusGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof taskStatusTaskStatusGet>>,
          TError,
          Awaited<ReturnType<typeof taskStatusTaskStatusGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTaskStatusTaskStatusGet<TData = Awaited<ReturnType<typeof taskStatusTaskStatusGet>>, TError = AxiosError<HTTPValidationError>>(
 params: TaskStatusTaskStatusGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof taskStatusTaskStatusGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Task status
 */

export function useTaskStatusTaskStatusGet<TData = Awaited<ReturnType<typeof taskStatusTaskStatusGet>>, TError = AxiosError<HTTPValidationError>>(
 params: TaskStatusTaskStatusGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof taskStatusTaskStatusGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTaskStatusTaskStatusGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Directly-follows graph discovery
 */
export const discoverDfgDfgPost = (
    objectTypeRequestBody: ObjectTypeRequestBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WeightedDirectedGraphResponse>> => {
    
    
    return axios.post(
      `/dfg`,
      objectTypeRequestBody,options
    );
  }



export const getDiscoverDfgDfgPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof discoverDfgDfgPost>>, TError,{data: ObjectTypeRequestBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof discoverDfgDfgPost>>, TError,{data: ObjectTypeRequestBody}, TContext> => {

const mutationKey = ['discoverDfgDfgPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof discoverDfgDfgPost>>, {data: ObjectTypeRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  discoverDfgDfgPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DiscoverDfgDfgPostMutationResult = NonNullable<Awaited<ReturnType<typeof discoverDfgDfgPost>>>
    export type DiscoverDfgDfgPostMutationBody = ObjectTypeRequestBody
    export type DiscoverDfgDfgPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Directly-follows graph discovery
 */
export const useDiscoverDfgDfgPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof discoverDfgDfgPost>>, TError,{data: ObjectTypeRequestBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof discoverDfgDfgPost>>,
        TError,
        {data: ObjectTypeRequestBody},
        TContext
      > => {

      const mutationOptions = getDiscoverDfgDfgPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Eventually-follows graph discovery
 */
export const discoverEfgEfgPost = (
    objectTypeRequestBody: ObjectTypeRequestBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DirectedGraphResponse>> => {
    
    
    return axios.post(
      `/efg`,
      objectTypeRequestBody,options
    );
  }



export const getDiscoverEfgEfgPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof discoverEfgEfgPost>>, TError,{data: ObjectTypeRequestBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof discoverEfgEfgPost>>, TError,{data: ObjectTypeRequestBody}, TContext> => {

const mutationKey = ['discoverEfgEfgPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof discoverEfgEfgPost>>, {data: ObjectTypeRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  discoverEfgEfgPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DiscoverEfgEfgPostMutationResult = NonNullable<Awaited<ReturnType<typeof discoverEfgEfgPost>>>
    export type DiscoverEfgEfgPostMutationBody = ObjectTypeRequestBody
    export type DiscoverEfgEfgPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Eventually-follows graph discovery
 */
export const useDiscoverEfgEfgPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof discoverEfgEfgPost>>, TError,{data: ObjectTypeRequestBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof discoverEfgEfgPost>>,
        TError,
        {data: ObjectTypeRequestBody},
        TContext
      > => {

      const mutationOptions = getDiscoverEfgEfgPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary OCPN discovery
 */
export const ocpnOcpnPost = (
    ocpnRequestBody: OcpnRequestBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OcpnResponse>> => {
    
    
    return axios.post(
      `/ocpn`,
      ocpnRequestBody,options
    );
  }



export const getOcpnOcpnPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ocpnOcpnPost>>, TError,{data: OcpnRequestBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof ocpnOcpnPost>>, TError,{data: OcpnRequestBody}, TContext> => {

const mutationKey = ['ocpnOcpnPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ocpnOcpnPost>>, {data: OcpnRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  ocpnOcpnPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OcpnOcpnPostMutationResult = NonNullable<Awaited<ReturnType<typeof ocpnOcpnPost>>>
    export type OcpnOcpnPostMutationBody = OcpnRequestBody
    export type OcpnOcpnPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary OCPN discovery
 */
export const useOcpnOcpnPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ocpnOcpnPost>>, TError,{data: OcpnRequestBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof ocpnOcpnPost>>,
        TError,
        {data: OcpnRequestBody},
        TContext
      > => {

      const mutationOptions = getOcpnOcpnPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Import OCEL 2.0 from .sqlite file
 */
export const importOcelImportPost = (
    bodyImportOcelImportPost: BodyImportOcelImportPost,
    params: ImportOcelImportPostParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OcelResponse>> => {
    
    const formData = new FormData();
formData.append(`file`, bodyImportOcelImportPost.file)

    return axios.post(
      `/import`,
      formData,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getImportOcelImportPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importOcelImportPost>>, TError,{data: BodyImportOcelImportPost;params: ImportOcelImportPostParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof importOcelImportPost>>, TError,{data: BodyImportOcelImportPost;params: ImportOcelImportPostParams}, TContext> => {

const mutationKey = ['importOcelImportPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof importOcelImportPost>>, {data: BodyImportOcelImportPost;params: ImportOcelImportPostParams}> = (props) => {
          const {data,params} = props ?? {};

          return  importOcelImportPost(data,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ImportOcelImportPostMutationResult = NonNullable<Awaited<ReturnType<typeof importOcelImportPost>>>
    export type ImportOcelImportPostMutationBody = BodyImportOcelImportPost
    export type ImportOcelImportPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Import OCEL 2.0 from .sqlite file
 */
export const useImportOcelImportPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importOcelImportPost>>, TError,{data: BodyImportOcelImportPost;params: ImportOcelImportPostParams}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof importOcelImportPost>>,
        TError,
        {data: BodyImportOcelImportPost;params: ImportOcelImportPostParams},
        TContext
      > => {

      const mutationOptions = getImportOcelImportPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Load OCEL
 */
export const loadOcelLoadGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OcelResponse>> => {
    
    
    return axios.get(
      `/load`,options
    );
  }


export const getLoadOcelLoadGetQueryKey = () => {
    return [`/load`] as const;
    }

    
export const getLoadOcelLoadGetQueryOptions = <TData = Awaited<ReturnType<typeof loadOcelLoadGet>>, TError = AxiosError<HTTPValidationError>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof loadOcelLoadGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLoadOcelLoadGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof loadOcelLoadGet>>> = ({ signal }) => loadOcelLoadGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof loadOcelLoadGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type LoadOcelLoadGetQueryResult = NonNullable<Awaited<ReturnType<typeof loadOcelLoadGet>>>
export type LoadOcelLoadGetQueryError = AxiosError<HTTPValidationError>


export function useLoadOcelLoadGet<TData = Awaited<ReturnType<typeof loadOcelLoadGet>>, TError = AxiosError<HTTPValidationError>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof loadOcelLoadGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof loadOcelLoadGet>>,
          TError,
          Awaited<ReturnType<typeof loadOcelLoadGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLoadOcelLoadGet<TData = Awaited<ReturnType<typeof loadOcelLoadGet>>, TError = AxiosError<HTTPValidationError>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof loadOcelLoadGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof loadOcelLoadGet>>,
          TError,
          Awaited<ReturnType<typeof loadOcelLoadGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLoadOcelLoadGet<TData = Awaited<ReturnType<typeof loadOcelLoadGet>>, TError = AxiosError<HTTPValidationError>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof loadOcelLoadGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Load OCEL
 */

export function useLoadOcelLoadGet<TData = Awaited<ReturnType<typeof loadOcelLoadGet>>, TError = AxiosError<HTTPValidationError>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof loadOcelLoadGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getLoadOcelLoadGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Download OCEL including app state
 */
export const downloadOcelDownloadGet = (
    params?: DownloadOcelDownloadGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.get(
      `/download`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getDownloadOcelDownloadGetQueryKey = (params?: DownloadOcelDownloadGetParams,) => {
    return [`/download`, ...(params ? [params]: [])] as const;
    }

    
export const getDownloadOcelDownloadGetQueryOptions = <TData = Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError = AxiosError<HTTPValidationError>>(params?: DownloadOcelDownloadGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDownloadOcelDownloadGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadOcelDownloadGet>>> = ({ signal }) => downloadOcelDownloadGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DownloadOcelDownloadGetQueryResult = NonNullable<Awaited<ReturnType<typeof downloadOcelDownloadGet>>>
export type DownloadOcelDownloadGetQueryError = AxiosError<HTTPValidationError>


export function useDownloadOcelDownloadGet<TData = Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError = AxiosError<HTTPValidationError>>(
 params: undefined |  DownloadOcelDownloadGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadOcelDownloadGet>>,
          TError,
          Awaited<ReturnType<typeof downloadOcelDownloadGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadOcelDownloadGet<TData = Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: DownloadOcelDownloadGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadOcelDownloadGet>>,
          TError,
          Awaited<ReturnType<typeof downloadOcelDownloadGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadOcelDownloadGet<TData = Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: DownloadOcelDownloadGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Download OCEL including app state
 */

export function useDownloadOcelDownloadGet<TData = Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: DownloadOcelDownloadGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDownloadOcelDownloadGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



